import numpy as np

def import_light():

    light_pattern = np.array([[[0,1,1,1,1,
                               1,0,0,0,0,
                               1,0,0,0,0,
                               1,0,0,0,0,
                               0,1,1,1,1]],
                             
                             [[1,1,1,0,0,
                               1,0,0,1,0,
                               1,0,0,0,1,
                               1,0,0,1,0,
                               1,1,1,0,0]],
                             
                             [[1,0,0,0,1,
                               1,0,0,0,1,
                               1,1,1,1,1,
                               1,0,0,0,1,
                               1,0,0,0,1]],
                             
                             [[1,0,0,0,1,
                               1,0,0,1,0,
                               1,1,1,0,0,
                               1,0,0,1,0,
                               1,0,0,0,1]],
                             
                             [[1,0,0,0,1,
                               1,1,0,0,1,
                               1,0,1,0,1,
                               1,0,0,1,1,
                               1,0,0,0,1]],
                              
                              [[0,1,1,1,0,
                                1,0,0,0,1,
                                1,0,0,0,1,
                                1,0,0,0,1,
                                0,1,1,1,0]],
                              
                              [[1,1,1,1,1,
                                1,0,0,0,1,
                                1,1,1,1,1,
                                1,0,0,1,0,
                                1,0,0,0,1]],
                              
                              [[0,1,1,1,1,
                                1,0,0,0,0,
                                0,1,1,1,0,
                                0,0,0,0,1,
                                1,1,1,1,0]],
                              
                              [[1,0,0,0,1,
                                1,0,0,0,1,
                                0,1,0,1,0,
                                0,1,0,1,0,
                                0,0,1,0,0]],
                              
                              [[1,1,1,1,1,
                                0,0,0,1,0,
                                0,0,1,0,0,
                                0,1,0,0,0,
                                1,1,1,1,1]]])
    
    return light_pattern

def import_dog_inh():
    
    dog_inh = np.array([[0,1,0,0,0, 1,1,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                        [1,0,1,0,0, 1,1,1,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                        [0,1,0,1,0, 0,1,1,1,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                        [0,0,1,0,1, 0,0,1,1,1, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                        [0,0,0,1,0, 0,0,0,1,1, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],

                        [1,1,0,0,0, 0,1,0,0,0, 1,1,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                        [1,1,1,0,0, 1,0,1,0,0, 1,1,1,0,0, 0,0,0,0,0, 0,0,0,0,0],
                        [0,1,1,1,0, 0,1,0,1,0, 0,1,1,1,0, 0,0,0,0,0, 0,0,0,0,0],
                        [0,0,1,1,1, 0,0,1,0,1, 0,0,1,1,1, 0,0,0,0,0, 0,0,0,0,0],
                        [0,0,0,1,1, 0,0,0,1,0, 0,0,0,1,1, 0,0,0,0,0, 0,0,0,0,0],

                        [0,0,0,0,0, 1,1,0,0,0, 0,1,0,0,0, 1,1,0,0,0, 0,0,0,0,0],
                        [0,0,0,0,0, 1,1,1,0,0, 1,0,1,0,0, 1,1,1,0,0, 0,0,0,0,0],
                        [0,0,0,0,0, 0,1,1,1,0, 0,1,0,1,0, 0,1,1,1,0, 0,0,0,0,0],
                        [0,0,0,0,0, 0,0,1,1,1, 0,0,1,0,1, 0,0,1,1,1, 0,0,0,0,0],
                        [0,0,0,0,0, 0,0,0,1,1, 0,0,0,1,0, 0,0,0,1,1, 0,0,0,0,0],

                        [0,0,0,0,0, 0,0,0,0,0, 1,1,0,0,0, 0,1,0,0,0, 1,1,0,0,0],
                        [0,0,0,0,0, 0,0,0,0,0, 1,1,1,0,0, 1,0,1,0,0, 1,1,1,0,0],
                        [0,0,0,0,0, 0,0,0,0,0, 0,1,1,1,0, 0,1,0,1,0, 0,1,1,1,0],
                        [0,0,0,0,0, 0,0,0,0,0, 0,0,1,1,1, 0,0,1,0,1, 0,0,1,1,1],
                        [0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,1, 0,0,0,1,0, 0,0,0,1,1],

                        [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,1,0,0,0, 0,1,0,0,0],
                        [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,1,1,0,0, 1,0,1,0,0],
                        [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,1,1,1,0, 0,1,0,1,0],
                        [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,1,1,1, 0,0,1,0,1],
                        [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,1, 0,0,0,1,0]])
    
    return dog_inh

def import_v1():
    
    tmp =  np.array([[1,0,0,0,0, 1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,1,0,0,0, 0,1,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,1,0,0, 0,0,1,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,1,0, 0,0,0,1,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,1, 0,0,0,0,1, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],

                     [1,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,1,0,0,0, 0,1,0,0,0, 0,1,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,1,0,0, 0,0,1,0,0, 0,0,1,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,1,0, 0,0,0,1,0, 0,0,0,1,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,1, 0,0,0,0,1, 0,0,0,0,1, 0,0,0,0,0, 0,0,0,0,0],

                     [0,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,1,0,0,0, 0,1,0,0,0, 0,1,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,1,0,0, 0,0,1,0,0, 0,0,1,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,1,0, 0,0,0,1,0, 0,0,0,1,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,1, 0,0,0,0,1, 0,0,0,0,1, 0,0,0,0,0],

                     [0,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,1,0,0,0, 0,1,0,0,0, 0,1,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,1,0,0, 0,0,1,0,0, 0,0,1,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,0, 0,0,0,1,0, 0,0,0,1,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1, 0,0,0,0,1, 0,0,0,0,1],

                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,1,0,0,0, 0,1,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,1,0,0, 0,0,1,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,0, 0,0,0,1,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1, 0,0,0,0,1],

                     #######################################################

                     [1,1,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [1,1,1,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,1,1,1,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,1,1,1, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,1,1, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],

                     [0,0,0,0,0, 1,1,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 1,1,1,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,1,1,1,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,1,1,1, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,1,1, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],

                     [0,0,0,0,0, 0,0,0,0,0, 1,1,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 1,1,1,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,1,1,1,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,1,1,1, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,1, 0,0,0,0,0, 0,0,0,0,0],

                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,1,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,1,1,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,1,1,1,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,1,1,1, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,1, 0,0,0,0,0],

                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,1,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,1,1,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,1,1,1,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,1,1,1],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,1],

                     #######################################################

                     [1,0,0,0,0, 0,1,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,1,0,0,0, 0,0,1,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,1,0,0, 0,0,0,1,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,1,0, 0,0,0,0,1, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,1, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],

                     [0,0,0,0,0, 1,0,0,0,0, 0,1,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [1,0,0,0,0, 0,1,0,0,0, 0,0,1,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,1,0,0,0, 0,0,1,0,0, 0,0,0,1,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,1,0,0, 0,0,0,1,0, 0,0,0,0,1, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,1,0, 0,0,0,0,1, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],

                     [0,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,1,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 1,0,0,0,0, 0,1,0,0,0, 0,0,1,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,1,0,0,0, 0,0,1,0,0, 0,0,0,1,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,1,0,0, 0,0,0,1,0, 0,0,0,0,1, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,1,0, 0,0,0,0,1, 0,0,0,0,0, 0,0,0,0,0],

                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,1,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,1,0,0,0, 0,0,1,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,1,0,0,0, 0,0,1,0,0, 0,0,0,1,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,1,0,0, 0,0,0,1,0, 0,0,0,0,1],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,0, 0,0,0,0,1, 0,0,0,0,0],

                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,1,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,1,0,0,0, 0,0,1,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,1,0,0, 0,0,0,1,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,0, 0,0,0,0,1],

                     #######################################################

                     [1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,1,0,0,0, 1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,1,0,0, 0,1,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,1,0, 0,0,1,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,1, 0,0,0,1,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],

                     [0,1,0,0,0, 1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,1,0,0, 0,1,0,0,0, 1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,1,0, 0,0,1,0,0, 0,1,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,1, 0,0,0,1,0, 0,0,1,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,1, 0,0,0,1,0, 0,0,0,0,0, 0,0,0,0,0],

                     [0,0,0,0,0, 0,1,0,0,0, 1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,1,0,0, 0,1,0,0,0, 1,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,1,0, 0,0,1,0,0, 0,1,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,1, 0,0,0,1,0, 0,0,1,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1, 0,0,0,1,0, 0,0,0,0,0],

                     [0,0,0,0,0, 0,0,0,0,0, 0,1,0,0,0, 1,0,0,0,0, 0,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,1,0,0, 0,1,0,0,0, 1,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,0, 0,0,1,0,0, 0,1,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1, 0,0,0,1,0, 0,0,1,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1, 0,0,0,1,0],

                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,1,0,0,0, 1,0,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,1,0,0, 0,1,0,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,0, 0,0,1,0,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1, 0,0,0,1,0],
                     [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1]])

    v1_ori = np.transpose(tmp)
    
    return v1_ori

def import_lettersRF():
    
    C = np.ones(100)
    tmp = np.array([0,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0, 0,0,0,0,0,  # Vertical
                    0,1,1,1,1, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,1,1,1,1,  # Horizontal
                    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0, 0,1,0,0,0,  # TLBR
                    0,1,0,0,0, 1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0]) # TRBL
    n = sum(tmp==1)
    C[tmp==1] = 1/n
    C[tmp==0] = -1/(100-n)

    ####################################################################################

    D = np.ones(100)
    tmp = np.array([1,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0,  # Vertical
                    1,1,1,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,1,1,0,0,  # Horizontal
                    0,0,1,0,0, 0,0,0,1,0, 0,0,0,0,1, 1,0,0,0,0, 0,1,0,0,0,  # TLBR
                    0,1,0,0,0, 1,0,0,0,0, 0,0,0,0,1, 0,0,0,1,0, 0,0,1,0,0]) # TRBL
    n = sum(tmp==1)
    D[tmp==1] = 1/n
    D[tmp==0] = -1/(100-n)

    ####################################################################################

    H = np.ones(100)
    tmp = np.array([1,0,0,0,1, 1,0,0,0,1, 1,0,0,0,1, 1,0,0,0,1, 1,0,0,0,1,  # Vertical
                    0,0,0,0,0, 0,0,0,0,0, 1,1,1,1,1, 0,0,0,0,0, 0,0,0,0,0,  # Horizontal
                    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,  # TLBR
                    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0]) # TRBL
    n = sum(tmp==1)
    H[tmp==1] = 1/n
    H[tmp==0] = -1/(100-n)

    ####################################################################################

    K = np.ones(100)
    tmp = np.array([1,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0, 1,0,0,0,0,  # Vertical
                    0,0,0,0,0, 0,0,0,0,0, 1,1,1,0,0, 0,0,0,0,0, 0,0,0,0,0,  # Horizontal
                    0,0,0,0,0, 0,0,0,0,0, 0,0,1,0,0, 0,0,0,1,0, 0,0,0,0,1,  # TLBR
                    0,0,0,0,1, 0,0,0,1,0, 0,0,1,0,0, 0,0,0,0,0, 0,0,0,0,0]) # TRBL
    n = sum(tmp==1)
    K[tmp==1] = 1/n
    K[tmp==0] = -1/(100-n)

    ####################################################################################

    N = np.ones(100)
    tmp = np.array([1,0,0,0,1, 1,0,0,0,1, 1,0,0,0,1, 1,0,0,0,1, 1,0,0,0,1,  # Vertical
                    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,  # Horizontal
                    1,0,0,0,0, 0,1,0,0,0, 0,0,1,0,0, 0,0,0,1,0, 0,0,0,0,1,  # TLBR
                    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0]) # TRBL
    n = sum(tmp==1)
    N[tmp==1] = 1/n
    N[tmp==0] = -1/(100-n)

    ####################################################################################

    O = np.ones(100)
    tmp = np.array([0,0,0,0,0, 1,0,0,0,1, 1,0,0,0,1, 1,0,0,0,1, 0,0,0,0,0,  # Vertical
                    0,1,1,1,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,1,1,1,0,  # Horizontal
                    0,0,0,1,0, 0,0,0,0,1, 0,0,0,0,0, 1,0,0,0,0, 0,1,0,0,0,  # TLBR
                    0,1,0,0,0, 1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1, 0,0,0,1,0]) # TRBL
    n = sum(tmp==1)
    O[tmp==1] = 1/n
    O[tmp==0] = -1/(100-n)

    ####################################################################################

    R = np.ones(100)
    tmp = np.array([1,0,0,0,1, 1,0,0,0,1, 1,0,0,0,1, 1,0,0,0,0, 1,0,0,0,0,  # Vertical
                    1,1,1,1,1, 0,0,0,0,0, 1,1,1,1,1, 0,0,0,0,0, 0,0,0,0,0,  # Horizontal
                    0,0,0,0,0, 0,0,0,0,0, 0,0,1,0,0, 0,0,0,1,0, 0,0,0,0,1,  # TLBR
                    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0]) # TRBL
    n = sum(tmp==1)
    R[tmp==1] = 1/n
    R[tmp==0] = -1/(100-n)

    ####################################################################################

    S = np.ones(100)
    tmp = np.array([0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,  # Vertical
                    0,1,1,1,1, 0,0,0,0,0, 0,1,1,1,0, 0,0,0,0,0, 1,1,1,1,0,  # Horizontal
                    0,0,0,0,0, 1,0,0,0,0, 0,1,0,1,0, 0,0,0,0,1, 0,0,0,0,0,  # TLBR
                    0,1,0,0,0, 1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1, 0,0,0,1,0]) # TRBL
    n = sum(tmp==1)
    S[tmp==1] = 1/n
    S[tmp==0] = -1/(100-n)

    ####################################################################################

    V = np.ones(100)
    tmp = np.array([1,0,0,0,1, 1,0,0,0,1, 0,1,0,1,0, 0,1,0,1,0, 0,0,0,0,0,  # Vertical
                    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,  # Horizontal
                    0,0,0,0,0, 1,0,0,0,0, 0,1,0,0,0, 0,1,0,0,0, 0,0,1,0,0,  # TLBR
                    0,0,0,0,0, 0,0,0,0,1, 0,0,0,1,0, 0,0,0,1,0, 0,0,1,0,0]) # TRBL
    n = sum(tmp==1)
    V[tmp==1] = 1/n
    V[tmp==0] = -1/(100-n)

    ####################################################################################

    Z = np.ones(100)
    tmp = np.array([0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,  # Vertical
                    1,1,1,1,1, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 1,1,1,1,1,  # Horizontal
                    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,  # TLBR
                    0,0,0,0,1, 0,0,0,1,0, 0,0,1,0,0, 0,1,0,0,0, 1,0,0,0,0]) # TRBL
    n = sum(tmp==1)
    Z[tmp==1] = 1/n
    Z[tmp==0] = -1/(100-n)

    ####################################################################################

    lettersRF = np.zeros((100,10))

    lettersRF[:,0] = C
    lettersRF[:,1] = D
    lettersRF[:,2] = H
    lettersRF[:,3] = K
    lettersRF[:,4] = N
    lettersRF[:,5] = O
    lettersRF[:,6] = R
    lettersRF[:,7] = S
    lettersRF[:,8] = V
    lettersRF[:,9] = Z
    
    return lettersRF